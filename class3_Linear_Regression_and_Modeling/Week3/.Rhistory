c_hist <- chisq.test(hist_workingdata$region,hist_workingdata$Govrn_intervene)
#for resent
c_recent <- chisq.test(recent_workingdata$region,recent_workingdata$Govrn_intervene)
#for total
c_total <-chisq.test(working_data$region,working_data$Govrn_intervene)
c_hist
c_recent
c_total
working_data_table <- table(working_data$region,working_data$Govrn_intervene)
prop.table(working_data_table)
working_data <- research_question
working_data_table <- table(working_data$region,working_data$Govrn_intervene)
prop.table(working_data_table)
setwd("G:/R/class3_Linear Regression and Modeling")
getwd()
setwd("G:/R/class3_Linear Regression and Modeling/Week3")
132.57/480.25
347.68/480.25
knitr::opts_chunk$set(echo = TRUE)
predicting poverty
#predicting poverty
pov_mlr = lm(poverty ~ feamel_house + white, data = states)
data(states)
states = read.csv("http://bit/ly/dasi_states")
states = read.csv("http://bit.ly/dasi_states")
#predicting poverty
pov_mlr = lm(poverty ~ feamel_house + white, data = states)
#predicting poverty
pov_mlr = lm(poverty ~ female_house + white, data = states)
summary(pov_mlr)
#testing the variability using ANOVA
anova(pov_mlr)
132.57/480.25
# R^2 adjusted = 1-(SSE/SST)*((n-1)/(n-k-1))
R_squared_adjusted <- 1-(339.49/480.25)*((51-1)/(51-2-1))
R_squared_adjusted
# R^2 adjusted = 1-(SSE/SST)*((n-1)/(n-k-1))
R_squared_adjusted <- 1-(339.49/480.25)*((51-1)/(51-2-1))
R_squared_adjusted
# compared to previously calculated as 339.49/480.25 = 27.6%
((132.57+8.21/480.25)*((51-1)/(51-2-1))
((132.57+8.21/480.25)*((51-1)/(51-2-1)))
((132.57+8.21)/480.25)*((51-1)/(51-2-1))
as
((132.57+8.21)/480.25)*((51-1)/(51-2-1))
# R^2 adjusted = 1-(SSE/SST)*((n-1)/(n-k-1))
R_squared_adjusted <- 1-(339.49/480.25)*((51-1)/(51-2-1))
R_squared_adjusted
# compared to previously calculated as (480.25-339.49)/480.25 = 30.5%
132.57+339.47
480.25-339.49
(132.57+8.21)/480.25
132.57+8.21
#load data
cignitive = read.csv("http://bit.ly/dasi_cognitive")
rm(list=ls())
cignitive = read.csv("http://bit.ly/dasi_cognitive")
#full model
cog_full = lm(kid_score~mom_hs + mom_iq + mom_work + mon_age, data = cognitive)
#load data
cognitive = read.csv("http://bit.ly/dasi_cognitive")
#full model
cog_full = lm(kid_score~mom_hs + mom_iq + mom_work + mon_age, data = cognitive)
rm(list=ls())
#load data
cognitive = read.csv("http://bit.ly/dasi_cognitive")
#full model
cog_full = lm(kid_score~mom_hs + mom_iq + mom_work + mom_age, data = cognitive)
#full model
cog_full = lm(kid_score~mom_hs + mom_iq + mom_work + mom_age, data = cognitive)
summary(cog_full)
pt(2.201,df=429,lower.tail = FALSE)
pt(2.201,df=429,lower.tail = FALSE)*2
pt(-2.201,df=429,lower.tail = FALSE)*2
pt(-2.201,df=429,lower.tail = FALSE)
1-pt(-2.201,df=429,lower.tail = FALSE)
View(cognitive)
plot(cog_full$residuals~cog_full$mom_iq)
View(cog_full)
cog_final = lm(kid_score~mom_hs + mom_iq + mom_work, data = cognitive)
plot(cog_final$residuals~cog_final$mom_iq)
plot(cog_final$residuals ~ cognitive$mom_iq)
hist(cog_final$residuals)
qq(cog_final$residuals)
qqline(cog_final$residuals)
qqnorm(cog_final$residuals)
qqline(cog_final$residuals)
plot(cog_final$residuals ~ cog_final$fitted.values
plot(cog_final$residuals ~ cog_final$fitted.values)
plot(cog_final$residuals ~ cog_final$fitted)
plot(abs(cog_final$residuals) ~ cog_final$fitted)
install.packages("GGally")
library(GGally)
detach("package:ggplot2", unload = TRUE)
qt(0.025,394)
qt(0.025,394)
12.5/554
12.24+0.18+0.2+4.37
16.99/(76)
76+0.35+0.4+26.57
16.99/196
103.32/199
0.08668367/0.519196
0.08668367/0.519196-1
0.08668367/0.519196
27+4.37+0.2+0.18+12.24
26.57+0.43+0.35+76
7003+57737+475
65215/(7003+57737+22790)
library(statsr)
library(dplyr)
library(ggplot2)
library(GGally)
data(evals)
force(evals)
dim(evals)
View(evals)
ggplot(evals,aes(x=score))+geom_histogram(binwidth = 1)
ggplot(evals,aes(x=score))+geom_histogram(binwidth = 0.2)
ggplot(evals,aes(x=score))+geom_histogram()
evals %>% group_by(score) %>% summarize(mean_score = mean(score))
summarize(mean_score = mean(evals$score))
summary(mean_score = mean(evals$score))
evals %>% sselect(score) %>% summarize(mean_score = mean(score))
evals %>% select(score) %>% summarize(mean_score = mean(score))
evals$score %>% summarize(mean_score = mean(score))
evals %>% select(score) %>% summarize(mean_score = mean(score),iqr_score = IQR(score))
evals %>% select(score) %>% summarize(mean_score = mean(score),iqr_score = IQR(score),meadian_score = median(score))
?summarize
evals %>% select(score) %>% summarize(mean_score = mean(score),iqr_score = IQR(score),meadian_score = median(score),quarile_score = quartile(score))
evals %>% select(score) %>% summarize(mean_score = mean(score),iqr_score = IQR(score),meadian_score = median(score),quantile_score = quantile(score))
quantile(evals$score)
mean(evals$score)
nrow(subset(evals,score<= "4"))
nrow(subset(evals,score<= "3"))
nrow(subset(evals,score< "3"))
?nrow
?subset
nrow(evals,score< "3")
subset(evals,score)
subset(evals,score<"3")
# type your code for Question 3 here, and Knit
#show the histogram
ggplot(evals,aes(x=score))+geom_histogram()
#mean
evals %>% select(score) %>% summarize(mean_score = mean(score))
#or
quantile(evals$score)
mean(evals$score)
nrow(subset(evals,score<"3"))
# type your code for Question 3 here, and Knit
#show the histogram
ggplot(evals,aes(x=score))+geom_histogram()
#mean
evals %>% select(score) %>% summarize(mean_score = mean(score))
#or
quantile(evals$score)
mean(evals$score)
nrow(subset(evals,score<"3"))
median(evals$score)
eval_classsize_avgbeuty <- evals %>% select(cls_students,bty_avg) %>% ggplot(evals,aes(x = cls_students,y = bty_avg)) +geom_point()
evals %>% ggplot(evals,aes(x = cls_students,y = bty_avg)) +geom_point()
eval_classsize_avgbeuty <- evals %>% select(cls_students,bty_avg)
ggplot(eval_classsize_avgbeuty,aes(x = cls_students,y = bty_avg)) +geom_point()
eval_classsize_avgbeuty %>%  lm(cls_students~bty_avg)
lm(cls_students~bty_avg, data = eval_classsize_avgbeuty)
plot(cls_students~bty_avg,dta = eval_classsize_avgbeuty)
plot(cls_students~bty_avg, data = eval_classsize_avgbeuty)
install.packages("vcd")
library(vcd)
mosaic(eval_classsize_avgbeuty)
mosaic(eval_classsize_avgbeuty,shade = TRUE, legend =TRUE)
mosaic(evals,shade = TRUE, legend =TRUE)
evals %>% mosaic(score,shade = TRUE, legend =TRUE)
evals %>% mosaic(evals$score,shade = TRUE, legend =TRUE)
eval_classsize_avgbeuty %>% mosaic(bty_avg,shade = TRUE, legend =TRUE)
ggplot(data = evals) + geom_mosaic()
ggplot2::aes(evals)
mosaicplot(evalsscore)
mosaicplot(evals$score)
mosaicplot(eval_classsize_avgbeuty$score)
mosaicplot(eval_classsize_avgbeuty$bty_avg)
ggplot(data = evals, aes(x = bty_avg, y = score)) +
geom_point()
ggplot(data = evals, aes(x = bty_avg, y = score)) +
geom_jitter()
?jitter
ggplot(data = evals, aes(x = bty_avg, y = score)) +
geom_jitter()+geom_point()
ggplot(data = evals, aes(x = bty_avg, y = score)) +
geom_jitter()
ggplot(data = evals, aes(x = bty_avg, y = score)) +
geom_point()
ggplot(data = evals, aes(x = bty_avg, y = score)) +
geom_jitter()
ggplot(data = evals, aes(x = bty_avg, y = score)) +
geom_point()
ggplot(data = evals, aes(x = bty_avg, y = score)) +
geom_jitter()
ggplot(data = evals, aes(x = bty_avg, y = score)) +
geom_point()
ggplot(data = evals, aes(x = bty_avg, y = score)) +
geom_jitter()
?geom_jitter
# type your code for the Exercise here, and Knit
eval_classsize_avgbeuty <- evals %>% select(eval)
eval_classsize_avgbeuty <- evals %>% select(eval)
eval_classsize_avgbeuty <- evals %>% select(eval)
eval_classsize_avgbeuty <- evals %>% select(eval)
eval_classsize_avgbeuty <- evals %>% select(cls_students,bty_avg)
# type your code for the Exercise here, and Knit
eval_classsize_avgbeuty <- evals %>% select(cls_students,bty_avg)
ggplot(eval_classsize_avgbeuty,aes(x = cls_students,y = bty_avg)) +geom_point()
plot(cls_students~bty_avg, data = eval_classsize_avgbeuty)
ggplot(data = evals, aes(x = bty_avg, y = score)) + <br/>geom_jitter()
ggplot(data = evals, aes(x = bty_avg, y = score)) + geom_jitter()
ggplot(data = evals, aes(x = bty_avg, y = score)) +
geom_jitter() +
geom_smooth(method = "lm")
ggplot(data = evals, aes(x = bty_avg, y = score)) +
geom_jitter() +
geom_smooth(method = "lm",se = FALSE)
lm(score~bty_avg,data = evals)
eval2 <-lm(score~bty_avg,data = evals)
summary(eval2)
# type your code for the Exercise here, and Knit
eval2 <-lm(score~bty_avg,data = evals)
summary(eval2)
View(eval2)
View(eval2)
plot(eval2$residuals~eval2$fitted)
plot(abs(eval2$residuals)~eval2$fitted)
summary(eval2)
plot(eval2$residuals~eval2$fitted)
ggplot(data = evals, aes(x = bty_f1lower, y = bty_avg)) +
geom_jitter()
evals %>%
summarise(cor(bty_avg, bty_f1lower))
ggplot(data = evals, aes(x = bty_f1lower, y = bty_avg)) +
geom_jitter()
evals %>%
summarise(cor(bty_avg, bty_f1lower))
ggpairs(evals, columns = 13:19)
ggpairs(evals, columns = 13:19)
m_bty_gen <- lm(score ~ bty_avg + gender, data = evals)
summary(m_bty_gen)
m_bty_ranl <- lm(score~bty_avg+rank,data =evals)
m_bty_rank <- lm(score~bty_avg+rank,data =evals)
summary(m_bty_rank)
rm(m_bty_ranl)
View(eval2)
View(eval2)
View(eval2)
newprof <- data.frame(gender = "male", bty_avg = 3)
predict(m_bty_gen,newprof)
predict(m_bty_gen,newprof,interval = "prediction",level=0.95)
m_full <- lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits + bty_avg
+ pic_outfit + pic_color, data = evals)
summary(m_full)
m_full <- lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits + bty_avg
+ pic_outfit , data = evals)
summary(m_full)
m_full <- lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_level + cls_profs + cls_credits + bty_avg
+ pic_outfit + pic_color, data = evals)
summary(m_full)
m_full <- lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits + bty_avg
+ pic_outfit , data = evals)
summary(m_full)
m_full <- lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_level + cls_profs + cls_credits + bty_avg
+ pic_outfit + pic_color, data = evals)
summary(m_full)
m_full <- lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits + bty_avg
+ pic_outfit + pic_color, data = evals)
summary(m_full)
m_full <- lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level  + cls_credits + bty_avg
+ pic_outfit + pic_color, data = evals)
summary(m_full)
m_full <- lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits + bty_avg
+ pic_outfit + pic_color, data = evals)
summary(m_full)
m_full <- lm(score ~ rank  + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits + bty_avg
+ pic_outfit + pic_color, data = evals)
summary(m_full)
m_full <- lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits + bty_avg
+ pic_outfit + pic_color, data = evals)
summary(m_full)
m_full <- lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits
+ pic_outfit + pic_color, data = evals)
summary(m_full)
m_full <- lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level  + cls_credits + bty_avg
+ pic_outfit + pic_color, data = evals)
summary(m_full)
m_full <- lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits
+ pic_outfit + pic_color, data = evals)
summary(m_full)
m_full <- lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits
+ pic_outfit + pic_color, data = evals)
summary(m_full)
m_full <- lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_level + cls_profs + cls_credits
+ pic_outfit + pic_color, data = evals)
summary(m_full)
m_full <- lm(score ~  ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits
+ pic_outfit + pic_color, data = evals)
summary(m_full)
summary(m_full)
m_full <- lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits + bty_avg
+ pic_outfit + pic_color, data = evals)
summary(m_full)
m_full <- lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level  + cls_credits + bty_avg
+ pic_outfit + pic_color, data = evals)
summary(m_full)
load("G:/R/class3_Linear Regression and Modeling/Week4/movies.Rdata")
View(movies)
3748*.8
3498*.8
name(movies)
header(movies)
head(movies)
dim(movies)
View(movies)
type(movies)
?table(sapply())
?table(sapply(movies,class))
table(sapply(movies,class))
table(sapply(movies,class))
View(movies)
summary(movies$title_type)
summary(movies$gnere)
summary(movies$gerne
summary(movies$gerne)
summary(movies$genre)
ggplot(movies,aes(x = genre)) + geom_histogram()
ggplot(movies,aes(x = genre)) + geom_bar()
ggplot(movies,aes(x = genre)) + geom_bar()
summary(movies$genre)
ggplot(movies,aes(x = genre)) + geom_bar()
summary(movies$genre)
summary(movies$director)
movies$director
summarize(movies$director)
movies$director %>% summarize(count = n())
movies %>% select(director) %>% summarize(count = n())
movies %>% select(director) %>% summarize()
movies %>% select(director) %>% summary()
table(movies$director)
max(table(movies$director))
max(table(movies$actor1))
max(table(movies$thtr_rel_year))
table(movies$thtr_rel_year)
table(movies$dvd_rel_year)
nrow(subset(moves,dvd_rel_year == "2001",genre=="Drama"))
nrow(subset(movies,dvd_rel_year == "2001",genre=="Drama"))
nrow(subset(movies,dvd_rel_year == "2001",genre=="comedy"))
nrow(subset(movies,dvd_rel_year == "2001" & genre=="Drama"))
nrow(subset(movies,dvd_rel_year == "2001" & genre=="comedy"))
39/651
sum(movies$genre)/sum(nrow(movies)
sum(movies$genre)/sum(nrow(movies))
sum(movies$genre)
sum(nrow(movies$genre))
movies %>% sum(nrow(genre))
movies %>% nrow(genre)
rowsum(movies$genre)
cbind(movies)
cbind(movies$genre)
sum(cbind(movies$genre))
table(movies$genre)
total(table(movies$genre))
sum(table(movies$genre))
sum(table(movies$genre,genre == "Drama"))
table(movies$thtr_rel_year)
max(table(movies$thtr_rel_year))
#some analysis
table(movies$thtr_rel_year)
max(table(movies$thtr_rel_year))
sum(table(movies$genre, == "Drama" & movies$thtr_rel_year == 2007))
#some analysis
table(movies$thtr_rel_year)
max(table(movies$thtr_rel_year))
sum(table(movies$genre == "Drama" & movies$thtr_rel_year == 2007))
#some analysis
table(movies$thtr_rel_year)
max(table(movies$thtr_rel_year))
nrow(subset(movies$genre == "Drama" & movies$thtr_rel_year == 2007))
#some analysis
table(movies$thtr_rel_year)
max(table(movies$thtr_rel_year))
nrow(subset(movies, genre == "Drama" & thtr_rel_year == 2007))
#some analysis
table(movies$thtr_rel_year)
max(table(movies$thtr_rel_year))
nrow(subset(movies, genre == "Drama" & thtr_rel_year == 2006))
nrow(subset(movies, genre == "Drama" & thtr_rel_year == 2007))
max(table(movies$director))
table(movies$director)
#The most number of the movies produced by certain director
nrow(subset(movies,director))
#The most number of the movies produced by certain director
sum(movies$director)
#The most number of the movies produced by certain director
max(table(movies$director))
#The most number of the movies have the same actor.
max(table(movies$actor1))
max(table(movies$actor2))
max(table(movies$actor3))
max(table(movies$actor4))
max(table(movies$actor5))
#using table(sapply()) to parse the data to look for count of each data type
table(sapply(movies,class))
library(ggplot2)
library(dplyr)
library(statsr)
library(GGaly)
library(ggplot2)
library(dplyr)
library(statsr)
library(GGally)
library(vcd)
#load("movies.Rdata")
#using table(sapply()) to parse the data to look for count of each data type
table(sapply(movies,class))
ggplot(movies,aes(x = genre)) + geom_bar()
summary(movies$genre)
sum(movies$genre)/sum(nrow(movies)
ggplot(movies,aes(x = genre)) + geom_bar()
summary(movies$genre)
sum(movies$genre)/sum(nrow(movies))
#some analysis
table(movies$thtr_rel_year)
max(table(movies$thtr_rel_year))
nrow(subset(movies, genre == "Drama" & thtr_rel_year == 2006))
nrow(subset(movies, genre == "Drama" & thtr_rel_year == 2007))
#load("movies.Rdata")
#load("movies.Rdata")
#load("movies.Rdata")
#using table(sapply()) to parse the data to look for count of each data type
table(sapply(movies,class))
ggplot(movies,aes(x = genre)) + geom_bar()
summary(movies$genre)
sum(movies$genre)/sum(nrow(movies))
table(sapply(movies,class))
#using table(sapply()) to parse the data to look for count of each data type
table(sapply(movies,class))
load("movies.Rdata")
#load("movies.Rdata")
load("G:/R/class3_Linear Regression and Modeling/Week4/movies.Rdata")
library(ggplot2)
library(dplyr)
library(statsr)
library(GGally)
library(vcd)
library(pkg.name, character.only=TRUE)
?lapply
#using table(sapply()) to parse the data to look for count of each data type
table(sapply(x=movies,class))
#using table(sapply()) to parse the data to look for count of each data type
table(sapply(x=movies,Fun = class))
#using table(sapply()) to parse the data to look for count of each data type
table(sapply(movies$class))
#using table(sapply()) to parse the data to look for count of each data type
table(sapply(movies$class))
#using table(sapply()) to parse the data to look for count of each data type
table(sapply(movies,class))
#using table(sapply()) to parse the data to look for count of each data type
table(sapply(movies,class))
knit_with_parameters('G:/R/class3_Linear Regression and Modeling/Week3/Reg_Model_Project_JZ.Rmd')
View(movies)
load("G:\R\class3_Linear Regression and Modeling\Week4")
#load("movies.Rdata")
data(movies)
#load("movies.Rdata")
data('movies.Rdata')
#load("movies.Rdata")
data('movies.Rdata')
#load("movies.Rdata")
data('movies.Rdata')
#load("movies.Rdata")
data('movies.Rdata')
#load("movies.Rdata")
data('movies.Rdata')
#load("movies.Rdata")
data('movies.Rdata')
#load("movies.Rdata")
data('movies.Rdata')
#load("movies.Rdata")
data('movies.Rdata')
#load("movies.Rdata")
data("movies.Rdata")
#load("movies.Rdata")
data("movies.Rdata")
#load("movies.Rdata")
data("movies.Rdata")
movies_1 <- data.frame(movies)
movies <- data.frame(movies)

bandit_posterior(data = data.frame(machine = 1, outcome = "W"))
# Initiate the two plays on Machine 1
data1 <- data.frame(machine = c(1), outcome = c("W"))
data2 <- data.frame(machine = c(1), outcome = c("L"))
# Use piping and bandit_posterior to calculuate the posterior probabilities after each play
bandit_posterior(data1) %>%
bandit_posterior(data2, prior = .)
View(data1)
# Initiate the two plays on Machine 1
data1 <- data.frame(machine = c(1), outcome = c("L"))
data2 <- data.frame(machine = c(1), outcome = c("W"))
# Use piping and bandit_posterior to calculuate the posterior probabilities after each play
bandit_posterior(data1) %>%
bandit_posterior(data2, prior = .)
# Initiate the two plays on Machine 1
data1 <- data.frame(machine = c(1), outcome = c("W"))
data2 <- data.frame(machine = c(1), outcome = c("L"))
# Use piping and bandit_posterior to calculuate the posterior probabilities after each play
bandit_posterior(data1) %>%
bandit_posterior(data2, prior = .)
# Initiate the two plays on Machine 1
data1 <- data.frame(machine = c(1), outcome = c("W"))
data2 <- data.frame(machine = c(1), outcome = c("W"))
# Use piping and bandit_posterior to calculuate the posterior probabilities after each play
bandit_posterior(data1) %>%
bandit_posterior(data2, prior = .)
# Initiate the two plays on Machine 1
data1 <- data.frame(machine = c(1), outcome = c("W"))
data2 <- data.frame(machine = c(1), outcome = c("L"))
# Use piping and bandit_posterior to calculuate the posterior probabilities after each play
bandit_posterior(data1) %>%
bandit_posterior(data2, prior = .)
0.3/(0.3+1/3*.4)
# Initiate the two plays on Machine 1
data1 <- data.frame(machine = c(1), outcome = c("W"))
data2 <- data.frame(machine = c(1), outcome = c("W"))
# Use piping and bandit_posterior to calculuate the posterior probabilities after each play
bandit_posterior(data1) %>%
bandit_posterior(data2, prior = .)
# Initiate the two plays on Machine 1
data1 <- data.frame(machine = c(1), outcome = c("W"))
data2 <- data.frame(machine = c(1), outcome = c("L"))
# Use piping and bandit_posterior to calculuate the posterior probabilities after each play
bandit_posterior(data1) %>%
bandit_posterior(data2, prior = .)
data1 <- data.frame(machine = c(1), outcome = c("W","W"))
View(data1)
data2 <- data.frame(machine = c(1), outcome = c("W"))
bandit_posterior(data1) %>%
bandit_posterior(data2, prior = .)
data1 <- data.frame(machine = c(1), outcome = c("W","W"))
data2 <- data.frame(machine = c(2), outcome = c("W","W","L"))
View(data2)
bandit_posterior(data1) %>%
bandit_posterior(data2, prior = .)
# Type your code for Question 4 here
data1 <- data.frame(machine = c(1), outcome = c("W","W"))
data2 <- data.frame(machine = c(2), outcome = c("W","W","L"))
View(data2)
bandit_posterior(data1) %>%
bandit_posterior(data2, prior = .)
# Type your code for Question 4 here
data1 <- data.frame(machine = c(1), outcome = c("W","W"))
data2 <- data.frame(machine = c(2), outcome = c("W","W","L"))
bandit_posterior(data1) %>%
bandit_posterior(data2, prior = .)
# Type your code for Question 5 here
data3 <- data.frame(machine = c(2), outcome = c("W","W","L"))
data4 <- data.frame(machine = c(1), outcome = c("W","W"))
bandit_posterior(data3) %>%
bandit_posterior(data4, prior = .)
# Store play results for each Machine into `data`
data <- data.frame(machine = c(rep(1, 20), rep(2, 20)),
outcome = c("L", "W", "W", "W", "L", "L", "L", "W", "W", "L",
"L", "W", "W", "W", "W", "L", "W", "L", "L", "L",
"W", "L", "L", "W", "L", "L", "L", "W", "L", "W",
"L", "L", "W", "L", "L", "L", "W", "W", "L", "W"))
# Calculate posterior probabilities after each play and plot the result
plot_bandit_posterior(data)
View(data)
plot(data)
ggplot(data,aes(x = machine,y=outcome))
ggplot(data,aes(x = machine,y=outcome))+geom_point()
# Store play results for each Machine into `data`
data <- data.frame(machine = c(rep(1, 20), rep(2, 20)),
outcome = c("L", "W", "W", "W", "L", "L", "L", "W", "W", "L",
"L", "W", "W", "W", "W", "L", "W", "L", "L", "L",
"W", "L", "L", "W", "L", "L", "L", "W", "L", "W",
"L", "L", "W", "L", "L", "L", "W", "W", "L", "W"))
# Calculate posterior probabilities after each play and plot the result
plot_bandit_posterior(data)
# Store play results for each Machine into `data`
data <- data.frame(machine = c(rep(1, 20), rep(2, 20)),
outcome = c("L", "W", "W", "W", "L", "L", "L", "W", "W", "L",
"L", "W", "W", "W", "W", "L", "W", "L", "L", "L",
"W", "L", "L", "W", "L", "L", "L", "W", "L", "W",
"L", "L", "W", "L", "L", "L", "W", "W", "L", "W"))
# Calculate posterior probabilities after each play and plot the result
plot_bandit_posterior(data)
# Store play results for each Machine into `data`
data <- data.frame(machine = c(rep(1, 20), rep(2, 20)),
outcome = c("L", "W", "W", "W", "L", "L", "L", "W", "W", "L",
"L", "W", "W", "W", "W", "L", "W", "L", "L", "L",
"W", "L", "L", "W", "L", "L", "L", "W", "L", "W",
"L", "L", "W", "L", "L", "L", "W", "W", "L", "W"))
# Calculate posterior probabilities after each play and plot the result
plot_bandit_posterior(data)
# Store play results for each Machine into `data`
data <- data.frame(machine = c(rep(1, 20), rep(2, 20)),
outcome = c("L", "W", "W", "W", "L", "L", "L", "W", "W", "L",
"L", "W", "W", "W", "W", "L", "W", "L", "L", "L",
"W", "L", "L", "W", "L", "L", "L", "W", "L", "W",
"L", "L", "W", "L", "L", "L", "W", "W", "L", "W"))
# Calculate posterior probabilities after each play and plot the result
plot_bandit_posterior(data)
bandit_posterior(data)
bandit_sim(data)
plot_bandit_posterior(data)
View(data)
5*4*3*2*1
120*0.9^5
0.9^5
0.2^2*0.8*0.01/(0.2^2*0.8*0.01+0.1*0.9^2*0.99)
0.8*0.01/(0.8*0.01+0.1*0.99)
0.8*0.075/(0.8*0.075+0.1*0.925)
10/1000
0.8*0.01/(0.8*0.01+0.1*0.99)
0.8*0.075/(0.8*0.075+0.1*0.925)
0.8*0.075
0.8*0.01
0.1*0.925
0.08+0.0925
dbinom(0,2,0.01)
dbinom(0,2,0.01)-1
dbinom(0,2,0.99)
dbinom(0,2,0.8)
dbinom(0,2,0.01)
0.9801*0.01/(0.9801*0.01+0.99+(1-0.9801))
dbinom(3,100,0.5)
sum(dbinom(0:3,100,0.5))
sum(dbinom(0:9,100,0.5))
sum(dbinom(0:3,size = 100,prob = 0.5))
sum(dbinom(0:3,size = 100,prob = 0.03))
0.001*0.5
5e-4
5e-4/(5e-4+5e-7)
0.999^10
0.99*0.01^2
0.99^2*0.01
0.8*0.01/(.8*0.01+.1*.99)
sum(dbinom(5,size =300,prob = 0.01))
sum(dbinom(3,size =100,prob = 0.05))
sum(dbinom(5,size =300,prob = 0.01))
dbinom(0,size =10,prob = 0.5)
0.001*0.999*10^100
0.001*0.999^10
0.5^10
0.5^9
0.999^9*0.001/(0.999^9*0.001+10e-6*(1-10e-6))
View(data)
data5 <- data.frame(machine = c(1), outcome = c("L","L","L","L","L","L","L","L","L","L"))
bandit_sim()
bandit_sim()
bandit_sim()
um(dbinom(3,size =100,prob = 0.1))
sum(dbinom(3,size =100,prob = 0.1))
0.99*0.99
*0.01
0.99*0.99*0.01
sum(dbinom(0:3,sieze=100,prob=0.1))
sum(dbinom(0:3,size=100,prob=0.1))
sum(dbinom(0,size=12,prob=0.01))
0.1*0.99/(.1*.99+.8*.01)
0.1*0.92/(.1*.92+.8*.08)
0.1*0.92/(.1*.92+.8*.08)-1
0.01*0.8+0.1*.99
0.099/0.107
0.008/0.107
0.008/0.107^2
(0.008/0.107)^2
(0.008/0.107)^2+(0.008/0.107*0.099/0.107)
sum(dbinom(0:5,300,0.01))
sum(dbinom(0:5,300,0.01))-1
sum(dbinom(0:5,300,0.01))
sum(dbinom(0,300,0.01))
dbinom(0,300,0.01)
dbinom(1,300,0.01)
sum(dbinom(0:4, size = 300, p = 0.01))
sum(dbinom(0:5, size = 300, p = 0.01))
knitr::opts_chunk$set(echo = TRUE)
pc<-2/3
Hy<-0.85
Hg<-0.15
pD_Hg=dbinom(4,5,2/3)
pD_Hy=dbinom(1,5,2/3)
pD=pD_Hg*Hg+pD_Hy*Hy
prior=Hg
likelihood=pD_Hg/pD
posterior=likelihood*prior
posterior
H1=0.5
H2=0.5
pDH1=(0.999)^10
pDH2=(0.999999)^10
pD=pDH1*H1+pDH2*(H2)
pH1D=pDH1*H1/pD
pH1D
sum(dbinom(0:4,300,0.01))-1
tropical=c(0,1,2,3,4)
1-sum(dbinom(tropical,300,0.01))
tropical=c(0,1,2,3,4,5)
1-sum(dbinom(tropical,300,0.01))
1-pbinom(998,6000,1/6)
1-pbinom(998,6000,0.175)
pH1=0.8 #p=1/6
pH2=0.2 #p=0.175
pDH1=1-pbinom(998,6000,1/6)
pDH2=1-pbinom(998,6000,0.175)
pD=pDH1*pH1+pDH2*pH2
pH1D=pDH1*pH1/pD
pH1D
0.5192*.8/(.5192*.8+.9606*.2)
pbinom(998,6000,1/6)
0.999^10
dbinom(998,6000,1/6)
?dbinom()
sum(dbinom(0:998,6000,1/6))
pbinom(4,300,0.01)
sum(dbinom(0:999,6000,1/6))
pbinom(1,2,0.8)
pbinom(1,2,0.1)
0.36*0.01/(0.36*0.01+0.99*0.99)
# R packages used to create the book
library(statsr)
library(BAS)
library(ggplot2)
library(dplyr)
library(BayesFactor)
library(knitr)
library(rjags)
library(coda)
library(latex2exp)
library(foreign)
library(BHH2)
library(scales)
library(logspline)
library(cowplot)
library(ggthemes)
library(tidyverse)
library(statsr)
library(statsr)
library(BAS)
library(tidyverse)
library(statsr)
library(statsr)
library(ggplot2)
library(dplyr)
library(BayesFactor)
pnorm(1, mean = 0, sd = 1, lower.tail = TRUE)
pnorm(1, mean = 0, sd = 1, lower.tail = FALSE)
756096/15
1.5/exp()
1.5*exp(-1)
1.5*exp(-1)+1
exp(-1.5)
exp(-1.5)*2.5
1-exp(-1.5)*2.5
6/13*2.25
6/7*2.25
library(tidyverse)
library(statsr)
data(brfss)
force(brfss)
head(brfss)
credible_interval_app()
# Type your code for Exercise 1 here.
qnorm(c(0.025, 0.975), mean = 10, sd = sqrt(5)
# Type your code for Exercise 1 here.
qnorm(c(0.025, 0.975), mean = 10, sd = sqrt(5))
credible_interval_app()
table(brfss$sex)
n <- length(brfss$sex)
nrow(brfss)
n1<-nrow(brfss)
x <-sum(brfss$sex == "female")
x <-sum(brfss$sex == "Female")
qbeta(c(0.025,0.0975),shape1 = 2587,shape2 = 2415)
n <- length(brfss$sex)
x <- sum(brfss$sex == "Female")
#calculate the updated beta credibal interval with prior of alpha =1, beta = 1
qbeta(c(0.025,0.0975),shape1 = 2586+1 ,shape2 = 2414+1)
credible_interval_app()
n <- length(brfss$sex)
x <- sum(brfss$sex == "Female")
#calculate the updated beta credibal interval with prior of alpha =1, beta = 1
qbeta(c(0.025,0.975),shape1 = 2586+1 ,shape2 = 2414+1)
qbeta(c(0.025,0.975),shape1 = 2586+500 ,shape2 = 2414+500)
qbeta(c(0.025,0.0975),shape1 = 2586 + 500,shape2 = 2414+ 500)
# Type your code for Question 7 here.
qbeta(c(0.025,0.0975),shape1 = 2586 + 5,shape2 = 2414+ 200)
credible_interval_app()
# Type your code for Question 7 here.
qbeta(c(0.025,0.975),shape1 = 2586 + 5,shape2 = 2414+ 200)
qbeta(c(0.025,0.975),shape1 = 2586 + 500,shape2 = 2414+ 500)
# Type your code for Question 7 here.
qbeta(c(0.025,0.975),shape1 = 2586 + 5,shape2 = 2414+ 200)
credible_interval_app()
table(brfss$exercise)
qnorm(c(0.05,0.95))
credible_interval_app()
brfss %>%select(exercise) %>% summarize(meand_br = mean(exercise),sd = sd(exercise))
brfss %>%select(exercise) %>% summarize(meand_br = mean(exercise),sd = sd(exercise))
table(brfss$exercise)
qbeta(c())
table(brfss$exercise)
qbeta(c(0.05,0.95),shape1 = 3868,shape2 = 1132)
# Type your code for Question 10 here.
x<- ls(2,3,4,5,4)
# Type your code for Question 10 here.
x<- c(2,3,4,5,4)
# Type your code for Question 10 here.
x<- c(2,3,4,5,4)
a<-4
b<-1
a<- a + sum(x)
b<- b + length(x)
credible_interval_app()
table(brfss$exercise)
qbeta(c(0.025,0.975),shape1 = 8868,shape2 = 6132)
# Type your code for Question 12 here.
x<- c(brff$fruit_per_day)
# Type your code for Question 12 here.
x1<- c(brfss$fruit_per_day)
a1<-4
b1<-1
a1<- a + sum(x)
b1<- b + length(x)
length(brfss$fruit_per_day)
# Type your code for Question 12 here.
x1<- c(brfss$fruit_per_day)
a1<-4
b1<-1
a1<- a + sum(x1)
b1<- b + length(x1)
# Type your code for Question 12 here.
x1<- c(brfss$fruit_per_day)
a1<-1
b1<-5
a1<- a + sum(x1)
b1<- b + length(x1)
# Type your code for Question 12 here.
x1<- c(brfss$fruit_per_day)
a1<-5
b1<-1
a1<- a + sum(x1)
b1<- b + length(x1)
sum(x1)
# Type your code for Question 12 here.
x1<- c(brfss$fruit_per_day)
a1<-5
b1<-1
a1<- a1 + sum(x1)
b1<- b1 + length(x1)
qgamma(c(0.05,0.95),shape = 8119,rate = 5001)
qbeta(c(0.025,0.975),shape1 = 5,shape2 = 200)
qbeta(c(0.025,0.975),shape1 = 5+2586,shape2 = 200+2414)
# Type your code for Question 7 here.
5/(5+200)
# Type your code for Question 10 here.
x<- c(2,3,4,5,4)
a<-4
b<-1
a<- a + sum(x)
b<- b + length(x)
b
a
# Type your code for Question 12 here.
x1<- c(brfss$fruit_per_day)
a1<-5
b1<-1
a1<- a1 + sum(x1)
b1<- b1 + length(x1)
a1
b1
credible_interval_app()
qbeta(0.2,shape1 = 1,shape2 = 2)
qbeta(0.2,shape1 = 1+3,shape2 = 2+17)
pbeta(0.2,shape1 = 1+3,shape2 = 2+17)
pbeta(0.2,shape1 = 1+3,shape2 = 1+17)
pbeta(0.2,shape1 = 1+3,shape2 = 1+17)
qbeta(0.2,shape1 = 1+3,shape2 = 1+17)
qbeta(0.2,1,1)
qbeta(0.2,4,22)
qbeta(0.2,4,22)-1
qbeta(0.2,4,22)
pbeta(0.2,4,22)
?pbeta
qbeta(0.2,4,24)
qbeta(0.2,4,24)-1
qbeta(0.2,4,22)
pbeta(0.2,4,22)
0.4^2*0.5/(0.4*0.4*0.5+0.6*0.6*0.5)
0.6^2*0.307/(0.6*0.6*0.307+0.6*0.6*(1-0.307))
0.6^2*0.307/(0.6*0.6*0.307+0.4*0.4*(1-0.307))
pstar=(1-0.6)^2*0.5/(0.6^2*.5+0.4^2*.5)
pstar
phead = 0.6^2*pstar+0.4^2*(1-pstar)
phead
pbeta(0.2,4,22)
credible_interval_app()
x<-seq(0,1,by=0.01)
as<-c(10,50,1,9,90)
bs<-c(90,50,9,1,10)
library(rafalib)
mypar(3,2)
for (i in 1:5){
y=dbeta(x,as[i],bs[i])
plot(x,y,type="l",main=paste("a,b=",as[i],bs[i]))
x<-seq(0,1,by=0.01)
as<-c(10,50,1,9,90)
bs<-c(90,50,9,1,10)
library(rafalib)
mypar(3,2)
for (i in 1:5){
y=dbeta(x,as[i],bs[i])
plot(x,y,type="l",main=paste("a,b=",as[i],bs[i]))}
x<-seq(0,1,by=0.01)
as<-c(10,50,1,9,90)
bs<-c(90,50,9,1,10)
library(rafalib)
mypar(3,2)
for (i in 1:5){
y=dbeta(x,as[i],bs[i])
plot(x,y,type="l",main=paste("a,b=",as[i],bs[i]))
}
install.packages("rafalib")
library(rafalib)
?mypar
x<-seq(0,1,by=0.01)
as<-c(10,50,1,9,90)
bs<-c(90,50,9,1,10)
library(rafalib)
mypar(3,2)
for (i in 1:5){
y=dbeta(x,as[i],bs[i])
plot(x,y,type="l",main=paste("a,b=",as[i],bs[i]))
}
1-qbeta(0.5,shape1 = 40+103,shape2 = 60+200-103)
1-pbeta(0.5,shape1 = 40+103,shape2 = 60+200-103)
?pbeta
b3 <-seq(0,1,by = 0.01)
by3<-qbeta(b3,shape1 = 40,shape2 = 60)
plot(by3)
plot(by3)
library(rafalib)
mypar(3,2)
for (i in 1:5){
y=dbeta(x,as[i],bs[i])
plot(x,y,type="l",main=paste("a,b=",as[i],bs[i]))
}
plot(by3)
d
plot(by3)
by3<-qbeta(b3,shape1 = 40+103,shape2 = 60+200-203)
by3<-qbeta(b3,shape1 = 40+103,shape2 = 60+200-103)
by4<-qbeta(b3,shape1 = 40+103,shape2 = 60+200-203)
plot(by4)
by5<-qbeta(0.5,shape1 = 40+103,shape2 = 60+200-203)
plot(by5)
pbeta(0.5,shape1 = 40+103,shape2 = 60+200-203)
pbeta(5,shape1 = 40+103,shape2 = 60+200-203)
pbeta(0.5,shape1 = 40+103,shape2 = 60+200-103)
by5<-qbeta(0.5,shape1 = 40+103,shape2 = 60+200-103)
plot(by5)
pbeta(0.5,shape1 = 40+103,shape2 = 60+200-103)
1-pbeta(0.5,shape1 = 40+103,shape2 = 60+200-103)
by6<-1-pbeta(0.5,shape1 = 40+103,shape2 = 60+200-103)
plot(by6)
b6<seq(0,1,by=0.1)
b6<-seq(0,1,by=0.1)
by6 <-pbeta(b6,shape1 = 40+103,shape2 = 60+200-103)
plot(by6)
b6<-seq(0,1,by=0.01)
by6 <-pbeta(b6,shape1 = 40+103,shape2 = 60+200-103)
plot(by6)
by5<-qbeta(0:0.5,shape1 = 40+103,shape2 = 60+200-103)
plot(by5)
by <- seq(0,0.5,by 0.01)
by <- seq(0,0.5,by =0.01)
by5<-qbeta(by,shape1 = 40+103,shape2 = 60+200-103)
plot(by5)
by6 <-pbeta(by,shape1 = 40+103,shape2 = 60+200-103)
plot(by6)
0.25*0.25/(0.25^2+0.75^2)
0.25*0.25*.5/(0.25^2*.5+0.75^2*.5)
0.75^*0.1+0.25^2*0.9
0.75^2*0.1+0.25^2*0.9
0.75*0.1+0.25*0.9
library(rafalib)
mypar(3,2)
for (i in 1:5){
y=dbeta(x,as[i],bs[i])
plot(x,y,type="l",main=paste("a,b=",as[i],bs[i]))
}
(200*4+149.3*50*50)/(4+50^2)
4*50^2/(4+50^2)
sqrt(3.99301)
sqrt(3.99361)
0.8/(0.8+1)
pstar<-(1/6)*(8/10)/((1/6)*(8/10)+1*2/10) #post probability that coin is fair
p6post<-pstar*1/6+(1-pstar)*1
p6post
